# -*- coding: utf-8 -*-
"""bioseq_fasta_auto_v1.0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iJJfRMzgNpA3x46-7sjYMQ0fwoWHCw9d
"""

pip install pysam

pip install Bio

from google.colab import drive
drive.mount('/content/drive')


rm -r workspace

cp -r drive/MyDrive/workspace_backup workspace


import pysam
from pysam import FastaFile
import numpy as np
import difflib
import sys
import os
import Bio
from Bio import SeqIO, AlignIO,SeqRecord,Seq
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
import io
import datetime
from datetime import timedelta

sys.setrecursionlimit(600000)


data_alias='workspace/'
data_type='.fasta'
m=500
gap=1000
n=50000

current_date=datetime.datetime.now()
timesequence=str(current_date)[0:10]
print(timesequence)






#fetch

dataset=[]
dataset_=[]
dataname_set=[]
for top, dirs, files in os.walk(data_alias):
  #print(files)
  for filename in files:
    file_type=(os.path.splitext(filename))

    if file_type[-1]==data_type:
     # print(file_type)
      sequence_data_set=SeqIO.parse(open(data_alias+filename),'fasta')
      for record in sequence_data_set:
        dataname=record.id
        data=record.seq
        content=str(dataname+' '+data)
        content_=SeqRecord(Seq(data),id=dataname).format('fasta')
        #print(content)
        dataname_set.append(dataname)

        with open (data_alias+dataname+output_type,'w') as output:
          output.write(content)
          output.close()
        with open (data_alias+dataname+data_type,'w') as output:
          output.write(content_)
          output.close()
        with open (data_alias+'index_'+timesequence+output_type,'w') as output:
          output.write(str(dataname_set))
          output.close()


file_name_origin='MN975262.1.fasta'
file_name_child='OM065387.1.fasta'
record_origin=SeqIO.read(data_alias+file_name_origin,'fasta')
record_child=SeqIO.read(data_alias+file_name_child,'fasta')
data_origin_id=record_origin.id
data_child_id=record_child.id
dataset_fasta=[]
for i in range(0,int(max(len(record_origin.seq),len(record_child.seq))/gap)+1):
  totalGap=i*gap
  data_seq_origin=record_origin.seq[0+totalGap:m+totalGap]
  data_seq_child=record_child.seq[0+totalGap:m+totalGap]
  dataset_fasta=[(data_seq_origin),(data_seq_child)]
  #print(dataset_fasta)
  print(u'batch is "{}", start point is "{}"'.format(i,totalGap))
  print(data_origin_id+' \n',data_seq_origin)
  print(data_child_id+' \n',data_seq_child)
  data_diff=difflib.ndiff(data_seq_origin,data_seq_child)
  #print(data_diff)
  for a, b in enumerate(dataset_fasta):
    print("{}=>{}".format(a,b))
    for i, s in enumerate(data_diff):
      try:
        if s[0]=="":
          continue
        elif s[0]=="-":
          print(u'Delete "{}" from position {}'.format(s[-1],i+totalGap))
        elif s[0]=="+":
          print(u'Add "{}" from position {}'.format(s[-1],i+totalGap))
          print()
      except (RuntimeError, ValueError, TypeError, NameError):
        print('exception point is: ',totalGap)
        exit
